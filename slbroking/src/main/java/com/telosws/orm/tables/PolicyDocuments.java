/**
 * This class is generated by jOOQ
 */
package com.telosws.orm.tables;


import com.telosws.orm.Keys;
import com.telosws.orm.Slbroking;
import com.telosws.orm.tables.records.PolicyDocumentsRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * it holds the documents of insureds related to policy
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.2"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PolicyDocuments extends TableImpl<PolicyDocumentsRecord> {

	private static final long serialVersionUID = 173179890;

	/**
	 * The reference instance of <code>slbroking.policy_documents</code>
	 */
	public static final PolicyDocuments POLICY_DOCUMENTS = new PolicyDocuments();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<PolicyDocumentsRecord> getRecordType() {
		return PolicyDocumentsRecord.class;
	}

	/**
	 * The column <code>slbroking.policy_documents.Document_ID</code>.
	 */
	public final TableField<PolicyDocumentsRecord, Integer> DOCUMENT_ID = createField("Document_ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>slbroking.policy_documents.Document_Name</code>.
	 */
	public final TableField<PolicyDocumentsRecord, String> DOCUMENT_NAME = createField("Document_Name", org.jooq.impl.SQLDataType.VARCHAR.length(100), this, "");

	/**
	 * The column <code>slbroking.policy_documents.Doc_Type_ID</code>.
	 */
	public final TableField<PolicyDocumentsRecord, Integer> DOC_TYPE_ID = createField("Doc_Type_ID", org.jooq.impl.SQLDataType.INTEGER, this, "");

	/**
	 * The column <code>slbroking.policy_documents.Comments</code>.
	 */
	public final TableField<PolicyDocumentsRecord, String> COMMENTS = createField("Comments", org.jooq.impl.SQLDataType.VARCHAR.length(200), this, "");

	/**
	 * The column <code>slbroking.policy_documents.Uploaded_Date</code>.
	 */
	public final TableField<PolicyDocumentsRecord, Timestamp> UPLOADED_DATE = createField("Uploaded_Date", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

	/**
	 * The column <code>slbroking.policy_documents.Status</code>.
	 */
	public final TableField<PolicyDocumentsRecord, String> STATUS = createField("Status", org.jooq.impl.SQLDataType.VARCHAR.length(50), this, "");

	/**
	 * The column <code>slbroking.policy_documents.Person_Det_ID</code>.
	 */
	public final TableField<PolicyDocumentsRecord, Integer> PERSON_DET_ID = createField("Person_Det_ID", org.jooq.impl.SQLDataType.INTEGER, this, "");

	/**
	 * The column <code>slbroking.policy_documents.Policy_Number</code>.
	 */
	public final TableField<PolicyDocumentsRecord, String> POLICY_NUMBER = createField("Policy_Number", org.jooq.impl.SQLDataType.VARCHAR.length(100), this, "");

	/**
	 * The column <code>slbroking.policy_documents.Document</code>.
	 */
	public final TableField<PolicyDocumentsRecord, byte[]> DOCUMENT = createField("Document", org.jooq.impl.SQLDataType.BLOB, this, "");

	/**
	 * Create a <code>slbroking.policy_documents</code> table reference
	 */
	public PolicyDocuments() {
		this("policy_documents", null);
	}

	/**
	 * Create an aliased <code>slbroking.policy_documents</code> table reference
	 */
	public PolicyDocuments(String alias) {
		this(alias, POLICY_DOCUMENTS);
	}

	private PolicyDocuments(String alias, Table<PolicyDocumentsRecord> aliased) {
		this(alias, aliased, null);
	}

	private PolicyDocuments(String alias, Table<PolicyDocumentsRecord> aliased, Field<?>[] parameters) {
		super(alias, Slbroking.SLBROKING, aliased, parameters, "it holds the documents of insureds related to policy");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Identity<PolicyDocumentsRecord, Integer> getIdentity() {
		return Keys.IDENTITY_POLICY_DOCUMENTS;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<PolicyDocumentsRecord> getPrimaryKey() {
		return Keys.KEY_POLICY_DOCUMENTS_PRIMARY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<PolicyDocumentsRecord>> getKeys() {
		return Arrays.<UniqueKey<PolicyDocumentsRecord>>asList(Keys.KEY_POLICY_DOCUMENTS_PRIMARY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<ForeignKey<PolicyDocumentsRecord, ?>> getReferences() {
		return Arrays.<ForeignKey<PolicyDocumentsRecord, ?>>asList(Keys.DOC_TYPE_FK, Keys.PERSONAL_DETAILS_FK, Keys.POL_NUM_FK);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public PolicyDocuments as(String alias) {
		return new PolicyDocuments(alias, this);
	}

	/**
	 * Rename this table
	 */
	public PolicyDocuments rename(String name) {
		return new PolicyDocuments(name, null);
	}
}
